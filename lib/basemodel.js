// Generated by CoffeeScript 1.6.3
(function() {
	var BaseModel, Validator, utils,
		__bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	utils = require('./utils');

	Validator = require('./validator');

	BaseModel = (function() {
		function BaseModel(params) {
			this.getTypeDefinition = __bind(this.getTypeDefinition, this);
			utils.extend(this, params);
		}

		BaseModel.create = function*(params) {
			var actualTypeDef, obj, typeDef;
			typeDef = yield* this.getTypeDefinition();
			if (typeDef.discriminator) {
				actualTypeDef = yield* typeDef.discriminator(params);
				obj = new actualTypeDef.ctor(params);
				obj.getTypeDefinition = function*() {
					return actualTypeDef;
				};
			} else {
				obj = new typeDef.ctor(params);
			}
			return obj;
		};

		BaseModel.getTypeDefinition = function*() {
			var typeDef;
			if (!this.__typeDefinition) {
				typeDef = typeof this.typeDefinition === "function" ? this.typeDefinition() : this.typeDefinition;
				this.__typeDefinition = yield* this.getTypesService().getTypeDefinition(typeDef.name);
				if (!this.__typeDefinition) {
					throw new Error("CANNOT_RESOLVE_TYPE_DEFINITION");
				}
			}
			return this.__typeDefinition;
		};

		BaseModel.getLimit = function(limit, _default, max) {
			var result;
			result = _default;
			if (limit) {
				result = limit;
				if (result > max) {
					result = max;
				}
			}
			return result;
		};

		BaseModel.prototype.validate = function*(typeDefinition) {
			var validator;
			if (typeDefinition == null) {
				typeDefinition = yield* this.getTypeDefinition();
			}
			validator = new Validator(this.constructor.getTypesService());
			return yield* validator.validate(this, typeDefinition);
		};

		BaseModel.prototype.validateField = function*(value, fieldName, typeDefinition) {
			var validator;
			if (typeDefinition == null) {
				typeDefinition = yield* this.getTypeDefinition();
			}
			validator = new Validator(this.constructor.getTypesService());
			return yield* validator.validateField(this, value, fieldName, typeDefinition);
		};

		BaseModel.prototype.getTypeDefinition = function*() {
			return yield* this.constructor.getTypeDefinition();
		};

		BaseModel.prototype.toJSON = function() {
			var k, result, v;
			result = {};
			for (k in this) {
				v = this[k];
				if (!/^__/.test(k)) {
					result[k] = v;
				}
			}
			return result;
		};

		return BaseModel;

	})();

	module.exports = BaseModel;

}).call(this);
