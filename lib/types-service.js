(function() {

	var _;

	var utils = require('./utils');
	var typeCache = {};

	var TypesService = function() {
	};


	TypesService.prototype.completeTypeDefinition = function(def, ctor) {
		def.ctor = ctor;
		if (!def.schema) {
			def.schema = {};
		}
		if (!def.schema.properties) {
			def.schema.properties = {};
		}
		if (!def.schema.required) {
			def.schema.required = [];
		}
		if (def.autoGenerated) {
			for (var k in def.autoGenerated) {
				def.schema.properties[k] = {
					type: 'integer'
				};
				def.schema.required.push(k);
			}
		}
		return def;
	};



	TypesService.prototype.resolveReferencesInDef = function*(def, dynamicResolutionContext) {
		var self = this;

		var fn = function*(val, prop) {
			var subTypeDef;
			if (val.type === 'object') {
				if (val.properties) {
					subTypeDef = {
						name: "<anonymous>",
						schema: {
							type: val.type,
							properties: val.properties,
							required: val.required
						}
					};
					prop.typeDefinition = subTypeDef;
					return yield* self.resolveReferencesInDef(subTypeDef);
				}
			} else if (val.$ref) {
				prop.typeDefinition = yield* self.getTypeDefinition(val.$ref, dynamicResolutionContext);
				return prop.typeDefinition;
			}
		};

		for (var property in def.schema.properties) {
			var value = def.schema.properties[property];
			if (value.type === 'array') {
				_ = yield* fn(value.items, def.schema.properties[property].items);
			} else {
				_ = yield* fn(value, def.schema.properties[property]);
			}
		}
	};


	TypesService.prototype.buildTypeCache = function*() {
		var def, items, modelName;
		if (this.getCacheItems) {
			items = yield* this.getCacheItems();
			for (modelName in items) {
				def = items[modelName];
				typeCache[modelName] = def;
			}

			for (modelName in typeCache) {
				def = typeCache[modelName];
				_ = yield* this.resolveReferencesInDef(def);
			}
		}
	};


	TypesService.prototype.getTypeDefinitions = function() {
		return typeCache;
	};


	TypesService.prototype.getTypeDefinition = function*(name, dynamicResolutionContext) {
		if (!dynamicResolutionContext) {
			dynamicResolutionContext = {};
		}
		return typeCache[name] || dynamicResolutionContext[name] || (yield* this.resolveDynamicTypeDefinition(name, dynamicResolutionContext));
	};


	TypesService.prototype.init = function*(name) {
		throw new Error("init() must be overridden in derived class");
	};


	TypesService.prototype.resolveDynamicTypeDefinition = function*(name, dynamicResolutionContext) {
		throw new Error("resolveDynamicTypeDefinition() method must be overridden in derived class");
	};


	module.exports = TypesService;

}).call(this);
