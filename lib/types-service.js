(function() {
	var _;

	var utils = require('./utils');

	var TypesService = function() {
	};

	TypesService.prototype.isPrimitiveType = function(type) {
		return ['string', 'number', 'integer', 'boolean', 'array'].indexOf(type) > -1;
	};

	TypesService.prototype.isCustomType = function(type) {
		return !this.isPrimitiveType(type);
	};

	TypesService.prototype.completeTypeDefinition = function(def, ctor) {
		var k, v, _base, _base1, _ref;
		def.ctor = ctor;
		if (!def.schema) {
			def.schema = {};
		}
		if (!def.schema.properties) {
			def.schema.properties = {};
		}
		if (!def.schema.required) {
			def.schema.required = [];
		}
		if (def.autoGenerated) {
			_ref = def.autoGenerated;
			for (k in _ref) {
				v = _ref[k];
				def.schema.properties[k] = {
					type: 'integer'
				};
				def.schema.required.push(k);
			}
		}
		return def;
	};

	TypesService.prototype.resolveReferences = function*() {
		var def, name, _ref;
		_ref = TypesService.typeCache;
		for (name in _ref) {
			def = _ref[name];
			_ = yield* this.resolveReferencesInDef(def);
		}
	};

	TypesService.prototype.resolveReferencesInDef = function*(def) {
		var fn, property, value, _ref, _results;
		fn = (function(_this) {
			return function*(val, prop) {
				var subTypeDef;
				if (val.type === 'object') {
					if (val.properties) {
						subTypeDef = {
							name: "<anonymous>",
							schema: {
								type: val.type,
								properties: val.properties,
								required: val.required
							}
						};
						prop.typeDefinition = subTypeDef;
						return yield* _this.resolveReferencesInDef(subTypeDef);
					}
				} else if (val.$ref) {
					prop.typeDefinition = yield* _this.getTypeDefinition(val.$ref);
					return prop.typeDefinition;
				}
			};
		})(this);
		_ref = def.schema.properties;
		_results = [];
		for (property in _ref) {
			value = _ref[property];
			if (value.type === 'array') {
				_results.push(yield* fn(value.items, def.schema.properties[property].items));
			} else {
				_results.push(yield* fn(value, def.schema.properties[property]));
			}
		}
		return _results;
	};

	TypesService.prototype.buildTypeCache = function*() {
		var def, items, modelName;
		if (!TypesService.typeCache) {
			TypesService.typeCache = {};
			if (this.getCacheItems) {
				items = yield* this.getCacheItems();
				for (modelName in items) {
					def = items[modelName];
					TypesService.typeCache[modelName] = def;
				}
				return yield* this.resolveReferences();
			}
		}
	};

	TypesService.prototype.getTypeDefinitions = function() {
		if (!TypesService.typeCache) {
			throw new Error("TypesService was not initialized before calling getTypeDefinitions()");
		}
		return TypesService.typeCache;
	};

	TypesService.prototype.getTypeDefinition = function*(name, dynamicResolutionContext) {
		var _ref, _ref1;
		if (!dynamicResolutionContext) {
			dynamicResolutionContext = {};
		}
		return (_ref = (_ref1 = TypesService.typeCache[name]) !== null ?
				_ref1 : dynamicResolutionContext[name]) !== null ?
				_ref : yield* this.resolveDynamicTypeDefinition(name, dynamicResolutionContext);
	};

	TypesService.prototype.init = function*(name) {
		throw new Error("init() must be overridden in derived class");
	};

	TypesService.prototype.resolveDynamicTypeDefinition = function*(name) {
		throw new Error("resolveDynamicTypeDefinition() method must be overridden in derived class");
	};

	module.exports = TypesService;

}).call(this);
