// Generated by CoffeeScript 1.6.3
(function() {
  var Mongo, MongoDb, Parser, thunkify,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Mongo = require('mongodb');

  thunkify = require('thunkify');

  Parser = require('./queryparser');

  MongoDb = (function() {
    function MongoDb(conf, typeDefinitions) {
      this.conf = conf;
      this.typeDefinitions = typeDefinitions;
      this.getCursor = __bind(this.getCursor, this);
      this.ObjectId = __bind(this.ObjectId, this);
      this.setupIndexes = __bind(this.setupIndexes, this);
      this.deleteDatabase = __bind(this.deleteDatabase, this);
      this.remove = __bind(this.remove, this);
      this.findOne = __bind(this.findOne, this);
      this.find = __bind(this.find, this);
      this.count = __bind(this.count, this);
      this.updateAll = __bind(this.updateAll, this);
      this.update = __bind(this.update, this);
      this.insert = __bind(this.insert, this);
      this.getDb = __bind(this.getDb, this);
    }

    MongoDb.prototype.getDb = function*() {
      var client;
      if (!this.db) {
        client = new Mongo.Db(this.conf.name, new Mongo.Server(this.conf.host, this.conf.port, {}), {
          safe: true
        });
        this.db = yield thunkify(client.open).call(client);
        this.parser = new Parser(this.typeDefinitions, this.conf);
      }
      return this.db;
    };

    MongoDb.prototype.insert = function*(typeDefinition, document) {
      var collection, db, result;
      db = yield this.getDb();
      collection = yield thunkify(db.collection).call(db, typeDefinition.collection);
      result = yield thunkify(collection.insert).call(collection, document, {
        safe: true
      });
      return result[0];
    };

    MongoDb.prototype.update = function*(typeDefinition, query, document) {
      var collection, db;
      db = yield this.getDb();
      query = this.parser.parse(query, typeDefinition);
      collection = yield thunkify(db.collection).call(db, typeDefinition.collection);
      return yield thunkify(collection.update).call(collection, query, document, {
        safe: true,
        multi: false
      });
    };

    MongoDb.prototype.updateAll = function*(typeDefinition, query, document) {
      var collection, db;
      db = yield this.getDb();
      query = this.parser.parse(query, typeDefinition);
      collection = yield thunkify(db.collection).call(db, typeDefinition.collection);
      return yield thunkify(collection.update).call(collection, query, document, {
        safe: true,
        multi: true
      });
    };

    MongoDb.prototype.count = function*(typeDefinition, query) {
      var cursor;
      cursor = yield this.getCursor(typeDefinition, query);
      return yield thunkify(cursor.count).call(cursor);
    };

    MongoDb.prototype.find = function*(typeDefinition, query, options) {
      var cursor;
      if (options == null) {
        options = {};
      }
      cursor = yield this.getCursor(typeDefinition, query, options);
      return yield thunkify(cursor.toArray).call(cursor);
    };

    MongoDb.prototype.findOne = function*(typeDefinition, query, options) {
      var cursor;
      if (options == null) {
        options = {};
      }
      cursor = yield this.getCursor(typeDefinition, query, options);
      return yield thunkify(cursor.nextObject).call(cursor);
    };

    MongoDb.prototype.remove = function*(typeDefinition, query, options) {
      var collection, db;
      if (options == null) {
        options = {};
      }
      db = yield this.getDb();
      query = this.parser.parse(query, typeDefinition);
      collection = yield thunkify(db.collection).call(db, typeDefinition.collection);
      return yield thunkify(collection.remove).call(collection, query, {
        safe: true
      });
    };

    MongoDb.prototype.deleteDatabase = function*() {
      var db;
      db = yield this.getDb();
      return yield (thunkify(db.dropDatabase)).call(db);
    };

    MongoDb.prototype.setupIndexes = function*() {
      var collection, db, index, name, typeDefinition, _i, _len, _ref, _ref1;
      db = yield this.getDb();
      _ref = this.typeDefinitions;
      for (name in _ref) {
        typeDefinition = _ref[name];
        if (typeDefinition.indexes) {
          collection = yield thunkify(db.collection).call(db, typeDefinition.collection);
          _ref1 = typeDefinition.indexes;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            index = _ref1[_i];
            yield thunkify(collection.ensureIndex).call(collection, index);
          }
        }
      }
    };

    MongoDb.prototype.ObjectId = function(id) {
      if (id) {
        if (typeof id === "string") {
          return new Mongo.ObjectID(id);
        } else {
          return id;
        }
      } else {
        return new Mongo.ObjectID();
      }
    };

    MongoDb.prototype.getCursor = function*(typeDefinition, query, options) {
      var collection, cursor, db;
      if (options == null) {
        options = {};
      }
      db = yield this.getDb();
      query = this.parser.parse(query, typeDefinition);
      collection = yield thunkify(db.collection).call(db, typeDefinition.collection);
      cursor = collection.find(query);
      if (options.sort) {
        cursor = cursor.sort(options.sort);
      }
      if (cursor.limit) {
        cursor = cursor.limit(options.limit);
      }
      return cursor;
    };

    return MongoDb;

  })();

  module.exports = MongoDb;

}).call(this);
