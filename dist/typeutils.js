// Generated by CoffeeScript 1.6.3
(function() {
  var TypeUtils, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  utils = require('./utils');

  TypeUtils = (function() {
    function TypeUtils() {
      this.resolveDynamicTypeDefinition = __bind(this.resolveDynamicTypeDefinition, this);
      this.init = __bind(this.init, this);
      this.getTypeDefinition = __bind(this.getTypeDefinition, this);
      this.getTypeDefinitions = __bind(this.getTypeDefinitions, this);
      this.buildTypeCache = __bind(this.buildTypeCache, this);
      this.resolveReferencesInDef = __bind(this.resolveReferencesInDef, this);
      this.resolveReferences = __bind(this.resolveReferences, this);
      this.completeTypeDefinition = __bind(this.completeTypeDefinition, this);
    }

    TypeUtils.prototype.isPrimitiveType = function(type) {
      return ['string', 'number', 'integer', 'boolean', 'array'].indexOf(type) > -1;
    };

    TypeUtils.prototype.isCustomType = function(type) {
      return !this.isPrimitiveType(type);
    };

    TypeUtils.prototype.completeTypeDefinition = function(def, ctor) {
      var k, v, _base, _base1, _ref;
      def.ctor = ctor;
      if (def.schema == null) {
        def.schema = {};
      }
      if ((_base = def.schema).properties == null) {
        _base.properties = {};
      }
      if ((_base1 = def.schema).required == null) {
        _base1.required = [];
      }
      if (def.autoGenerated) {
        _ref = def.autoGenerated;
        for (k in _ref) {
          v = _ref[k];
          def.schema.properties[k] = {
            type: 'integer'
          };
          def.schema.required.push(k);
        }
      }
      return def;
    };

    TypeUtils.prototype.resolveReferences = function*() {
      var def, name, _ref;
      _ref = TypeUtils.typeCache;
      for (name in _ref) {
        def = _ref[name];
        yield this.resolveReferencesInDef(def);
      }
    };

    TypeUtils.prototype.resolveReferencesInDef = function*(def) {
      var fn, property, value, _ref, _results;
      fn = (function(_this) {
        return function*(val, prop) {
          var subTypeDef;
          if (val.type === 'object') {
            if (val.properties) {
              subTypeDef = {
                name: "<anonymous>",
                schema: {
                  type: val.type,
                  properties: val.properties,
                  required: val.required
                }
              };
              prop.typeDefinition = subTypeDef;
              return yield _this.resolveReferencesInDef(subTypeDef);
            }
          } else if (val.$ref) {
            return prop.typeDefinition = yield _this.getTypeDefinition(val.$ref);
          }
        };
      })(this);
      _ref = def.schema.properties;
      _results = [];
      for (property in _ref) {
        value = _ref[property];
        if (value.type === 'array') {
          _results.push(yield fn(value.items, def.schema.properties[property].items));
        } else {
          _results.push(yield fn(value, def.schema.properties[property]));
        }
      }
      return _results;
    };

    TypeUtils.prototype.buildTypeCache = function*() {
      var def, items, modelName;
      TypeUtils.typeCache = {};
      if (this.getCacheItems) {
        items = yield this.getCacheItems();
        for (modelName in items) {
          def = items[modelName];
          TypeUtils.typeCache[modelName] = def;
        }
        return yield this.resolveReferences();
      }
    };

    TypeUtils.prototype.getTypeDefinitions = function() {
      return TypeUtils.typeCache;
    };

    TypeUtils.prototype.getTypeDefinition = function*(name, dynamicResolutionContext) {
      var _ref, _ref1;
      if (dynamicResolutionContext == null) {
        dynamicResolutionContext = {};
      }
      return (_ref = (_ref1 = TypeUtils.typeCache[name]) != null ? _ref1 : dynamicResolutionContext[name]) != null ? _ref : yield this.resolveDynamicTypeDefinition(name, dynamicResolutionContext);
    };

    TypeUtils.prototype.init = function*(name) {
      throw new Error("This method must be overridden in derived class");
    };

    TypeUtils.prototype.resolveDynamicTypeDefinition = function*(name) {
      throw new Error("This method must be overridden in derived class");
    };

    return TypeUtils;

  })();

  module.exports = TypeUtils;

}).call(this);
